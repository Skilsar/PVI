Сервлет – это web-компонент, представляющий собой класс Java, 
предназначенный для динамического формирования содержимого ответов на запросы клиентского приложения (обычно web-браузера). 
Сервлеты размещаются на сервере и выполняются в специальной среде – контейнере сервлетов (Servlet engine), – на виртуальной Javaмашине (JVM) сервера. Контейнер сервлетов является составной частью web-контейнера и определяется спецификацией Java Servlet. В
общем случае сервлеты не зависят от протокола связи, но наиболее
часто они применяются для обработки http-запросов. 

Следует подчеркнуть, что сервлет управляется web-контейнером, 
т. е. имеет API, управляемый событиями (even-driven API). Загрузку, 
выгрузку сервлетов, вызов методов, предварительную обработку запросов и ответов клиента, а также многое другое выполняет webконтейнер

Java Servlet API организован в виде двух пакетов, содержащих два
набора базовых классов: javax.servlet – общие для всех сервлетов интерфейсы и классы; javax.servlet.http – расширение пакета
javax.servlet, обеспечивающее поддержку протокола HTTP.

Все сервлеты должны реализовать интерфейс javax.servlet.Servlet
(далее просто Servlet). Этот интерфейс предполагает три основных
метода (реализация их представлена на рис. 3.1) и два вспомогательных, которые будут рассмотрены ниже
Метод init вызывается сервером при инициализации сервлета. 
Этот метод позволяет программисту выполнить некоторые действия
перед началом работы сервлета. В качестве параметра метод получает
объект, реализующий интерфейс ServletConfig. Методы этого интерфейса реализуются сервером, они позволяют сервлету получить информацию о своей конфигурации. 
Метод destroy тоже вызывается сервером, но при его выгрузке. 
Этот метод используется разработчиком сервлета для выполнения
действий, связанных с окончанием работы, – освобождение ресурсов, 
закрытие соединений с сервером базы данных и т. п. 
Метод service предназначен для обработки запроса клиента. Метод вызывается сервером при получении запроса клиента на вызов
сервлета. Сервер формирует два параметра. Первый реализует интерфейс HTTPServletRequest и используется для того, чтобы получить
информацию о http-запросе. Второй параметр, реализующий интерфейс HTTPServletResponse, дает возможность сервлету формировать
http-ответ клиенту. В данном примере в функции service используется
вызов метода getMethod интерфейса HTTPServletRequest. Функция
getMethod позволяет определить тип http-запроса (get, post, put, 
delete, options и т. д.).

В элементе <servlet> содержится информация об именах сервлета (вложенный тег <servlet-name>) и классе сервлета (вложенный тег
<servlet-class>). Откомпилированный класс (в нашем случае файл
Sss.class) должен находитьcя, как уже говорилось выше, в стандартной директории Tomcat 6.0/webapps/WEB-INF/classes. Имя, задаваемое тегом <servlet-name>, не обязательно должно совпадать с
именем класса сервлета, как это сделано в примере, а может быть
произвольным. 
Элемент <servlet-mapping> указывает на суффикс URL (тег <urlpattern>), с помощью которого можно вызвать сервлет. В данном
случае для вызова сервлета в адресной строке web-браузера нужно
указать Hhttp://xxx:8080/ANaive/SssH, где xxx, как и прежде, – ip-адрес
или разрешаемое символическое имя компьютера с установленным
сервером Tomcat. Указанная в элементе <url-pattern> строка не обязательно должна совпадать с именами сервлета или класса. 

Для компиляции сервлета необходима
библиотека, поставляемая вместе с сервером Tomcat. Месторасположение этой библиотеки указывается атрибутом classpath задачи javac

Кроме того, следует обратить внимание, что в рабочей директории Workspace_ANaive появились две новые поддиректории: scr – 
для хранения исходных java-файлов, build – для хранения откомпилированных class-файлов. 


Класс HttpServlet имеет собственную реализацию метода service, 
который в зависимости от типа http-запроса передает управление в
один из следующих переопределяемых методов: doGet, doPost, doPut, 
doDelete, doHead, doOptions, doTrace. Перечисленные методы соответствуют различным типам http-запросов. Наиболее часто используемые типы запросы в web-приложениях – это GET и POST.

Для получения значения параметра с именем page применяется метод getParameter интерфейса HttpServlet Request (строка 1).

Разработка сервлета, обрабатывающего http-запрос POST, принципиально ничем не отличается от разработки сервлета, обрабатывающего запрос GET. Для генерации запроса POST, как правило, 
применяется html-форма, а обработка этого запроса осуществляется в
методе doPost вызываемого сервлета. Параметры в этом случае не
передаются как часть URL, а содержатся в теле hhtp-запроса. 

